package org.compi2.codigo3d.parser;

import java_cup.runtime.Symbol;

//PARSER PARA EL ARCHIVO DE ESCENARIOS
parser code
{://Codigo visible

    public void syntax_error(Symbol s){
        System.err.println(s);
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.err.println("T.T");
        System.err.println(s);
    }

:}

action code
{://Codigo de acciones
      
:}

terminal String ID, ENTERO, DECIMAL;
terminal TokenC3D MAS, MENOS, MULT, DIV, POT, PAR_IZQ, PAR_DER;
terminal TokenC3D IGUAL,DIFERENTE,MAYORQ,MENORQ,MAYORIGUAL,MENORIGUAL,AND,ANDA,OR,ORO,NOT;

nonterminal NodoC3D inicial, expresion;
nonterminal NodoC3D op_and,op_compare1,op_compare,op_unario,f;

precedence left OR,ORO;
precedence left AND, ANDA;
precedence left IGUAL,DIFERENTE;
precedence left  MENORQ,MAYORQ,MENORIGUAL,MAYORIGUAL;

precedence left MAS, MENOS;
precedence left MULT, DIV; 
precedence right POT; 




start with inicial;

inicial     ::= {: ControlC3D.reiniciar(); :} f:exp 
                    {: 
                        RESULT = exp;
                        ControlC3D.agregarC3D("//Ãšltimo valor: " + exp.getCad());
                    :};



f       ::= expresion:i OR op_and:d 	
                        {: 
                            String temp = ControlC3D.generaTemp();
                            String c3d = temp + " = " + i.getCad() + " || " + d.getCad() + ";\n";
                            ControlC3D.agregarC3D(c3d);
                            RESULT = new NodoC3D(temp); 
                        :}
                |expresion:i ORO op_and:d 	
                        {: 
                            String temp = ControlC3D.generaTemp();
                            String c3d = temp + " = " + i.getCad() + " OR " + d.getCad() + ";\n";
                            ControlC3D.agregarC3D(c3d);
                            RESULT = new NodoC3D(temp);                                 															
                        :}
                | op_and:o	{:RESULT = o; :}
                 ;

op_and     ::= op_and:i AND op_compare1:d 
                        {: 
                            String temp = ControlC3D.generaTemp();
                            String c3d = temp + " = " + i.getCad() + " && " + d.getCad() + ";\n";
                            ControlC3D.agregarC3D(c3d);
                            RESULT = new NodoC3D(temp);                                 
                        :}
               |op_and:i ANDA op_compare1:d 
                        {: 
                            String temp = ControlC3D.generaTemp();
                            String c3d = temp + " = " + i.getCad() + " AND " + d.getCad() + ";\n";
                            ControlC3D.agregarC3D(c3d);
                            RESULT = new NodoC3D(temp);                                 
                        :}
               | op_compare1:o {:RESULT = o; :}
			   ;
			   		

op_compare1  ::= op_compare1:i IGUAL op_compare:d	
                        {: 
                            String temp = ControlC3D.generaTemp();
                            String c3d = temp + " = " + i.getCad() + " == " + d.getCad() + ";\n";
                            ControlC3D.agregarC3D(c3d);
                            RESULT = new NodoC3D(temp); 
                        :}
               | op_compare1:i DIFERENTE op_compare:d 
                        {: 
                            String temp = ControlC3D.generaTemp();
                            String c3d = temp + " = " + i.getCad() + " != " + d.getCad() + ";\n";
                            ControlC3D.agregarC3D(c3d);
                            RESULT = new NodoC3D(temp); 
                        :}
               | op_compare:o	{:RESULT= o; :}
			   ;
			   
op_compare ::= op_compare:i MENORQ  op_unario:d		
                        {: 
                            String temp = ControlC3D.generaTemp();
                            String c3d = temp + " = " + i.getCad() + " < " + d.getCad() + ";\n";
                            ControlC3D.agregarC3D(c3d);
                            RESULT = new NodoC3D(temp); 
                        :}
               | op_compare:i MAYORQ  op_unario:d	
                        {: 
                            String temp = ControlC3D.generaTemp();
                            String c3d = temp + " = " + i.getCad() + " > " + d.getCad() + ";\n";
                            ControlC3D.agregarC3D(c3d);
                            RESULT = new NodoC3D(temp); 
                        :}
               | op_compare:i MENORIGUAL op_unario:d	
                                {: 
                            String temp = ControlC3D.generaTemp();
                            String c3d = temp + " = " + i.getCad() + " <= " + d.getCad() + ";\n";
                            ControlC3D.agregarC3D(c3d);
                            RESULT = new NodoC3D(temp);                                        
                                :}
               | op_compare:i MAYORIGUAL op_unario:d	
                        {: 
                            String temp = ControlC3D.generaTemp();
                            String c3d = temp + " = " + i.getCad() + " >= " + d.getCad() + ";\n";
                            ControlC3D.agregarC3D(c3d);
                            RESULT = new NodoC3D(temp); 
                        :}
               | op_unario:o	{:RESULT = o; :}
			   ;

op_unario   ::= NOT    op_unario:o  
                        {:  //FUNCION NOT
                            String temp = ControlC3D.generaTemp();
                            String c3d = temp + " = " +  " NOT " + o.getCad() + ";\n";
                            ControlC3D.agregarC3D(c3d);
                            RESULT = new NodoC3D(temp); 
                        :}         
                | expresion:v	{:RESULT = v; :}
                ;

expresion   ::= expresion:izq MAS expresion:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " + " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
            |   expresion:izq MENOS expresion:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " - " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
            |   expresion:izq MULT expresion:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " * " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
            |   expresion:izq DIV expresion:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " / " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
            |   expresion:izq POT expresion:der
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = " + izq.getCad() + " ^ " + der.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
            |   MENOS expresion:exp 
                    {: 
                        String temp = ControlC3D.generaTemp();
                        String c3d = temp + " = - " + exp.getCad() + ";\n";
                        ControlC3D.agregarC3D(c3d);
                        RESULT = new NodoC3D(temp); 
                    :}
            |   PAR_IZQ expresion:exp PAR_DER   
                    {: RESULT = exp; :}
            |   ID:id           
                    {: RESULT = new NodoC3D(id); :}
            |   ENTERO:entero   
                    {: RESULT = new NodoC3D(entero); :}
            |   DECIMAL:decimal 
                    {: RESULT = new NodoC3D(decimal); :}
            ;